# org: ctownsdin
app: serverless-todo-app
service: serverless-todo-app
variablesResolutionMode: "20210326" # if vars are undefined, stop

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing

custom:
  dynamodb:
    stages:
      - ${self:provider.stage}

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: "20201221"

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-west-2'}

  tracing:
    lambda: true
    apiGateway: true

  # Use these variables in the functions and resouorces section below. For example,
  # ${self:provider.environment.ATTACHMENT_S3_BUCKET}
  environment:
    TODOS_TABLE: todos-${self:provider.stage}
    TODOS_CREATED_AT_INDEX: CreatedAtIndex

    GROUPS_TABLE: groups-${self:provider.stage}
    IMAGES_TABLE: images-${self:provider.stage}
    IMAGE_ID_INDEX: imageIdIndex

    ATTACHMENT_S3_BUCKET: serverless-todos-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

  logs:
    # Enable API Gateway logs
    restApi: true

  # iam:
  #   role:
  #     statements:
  #       - Effect: Allow
  #         Action:
  #           - xray:PutTelemetryRecords
  #           - xray:PutTraceSegments
  #         Resource: "*"

resources:
  Resources:
    # TODO: Create a DynamoDB table with local secondary index and a composite key
    TodosTable:
      Type: AWS::DynamoDB::Table
      # reference: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html
      Properties:
        TableName: ${self:provider.environment.TODOS_TABLE}
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
          - AttributeName: dueDate
            AttributeType: S
        KeySchema: # specifies attrib's that make up the primary key
          - AttributeName: name
            KeyType: HASH
          - AttributeName: dueDate
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        # NOTE: Partition key is newnamefor Hash key, Sort key is newnamefor Range key
        # ProvisionedThroughput:
        #   ReadCapacityUnits: 1
        #   WriteCapacityUnits: 1

    ImagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.IMAGES_TABLE}
        AttributeDefinitions:
          - AttributeName: groupId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
          - AttributeName: imageId
            AttributeType: S
        KeySchema:
          - AttributeName: groupId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.IMAGE_ID_INDEX}
            KeySchema:
              - AttributeName: imageId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    GroupsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.GROUPS_TABLE}
        AttributeDefinitions:
          - AttributeName: groupId
            AttributeType: S
          # - AttributeName: description
          #   AttributeType: S
          # - AttributeName: name
          #   AttributeType: S
        KeySchema: # specifies attrib's that make up the primary key
          - AttributeName: groupId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    # TODO: Complete the bucket properties below.
    # Do not forget to add the CorsConfiguration propoerty
    # AttachmentsBucket:
    #   Type: AWS::S3::Bucket
    #   Properties:

    # TODO: Complete the policy below and attach it to the bucket defined above
    # For cross referencing the name of the bucket, use "!Ref AttachmentsBucket"
    # BucketPolicy:
    #   Type: AWS::S3::BucketPolicy
    #   Properties:

    # TODO:
    # GatewayResponseDefault4XX:
    #   Type: AWS::ApiGateway::GatewayResponse
    #   Properties:

    # I think request validation is built into api gateway now and so this is no longer required here.
    # RequestBodyValidator:
    #   Type: AWS::ApiGateway::RequestValidator
    #   Properties:
    #     Name: 'request-body-validator'
    #     RestApiId:
    #       Ref: ApiGatewayRestApi
    #     Valida

functions:
  # Auth:
  #   handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function -
  # Provide iamRoleStatements property. Decide the Actions and AWS Resource.
  # To refer to an AWS resource defined in the "Resources" section, you can use "Resource: !GetAtt <resource-name>.Arn"
  # To validate incoming HTTP requests, we have provided the request schemas in function definition below.
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}"
    events:
      - http:
          path: todos
          method: post
          cors: true
          # authorizer: Auth
          request:
            # schema which validates incoming requests
            schemas:
              application/json: ${file(create-todo-request.json)}

  # GetTodos:
  #   handler: src/lambda/http/getTodos.handler
  #   iamRoleStatements:
  #     - Effect: "Allow"
  #       Action:
  #         - dynamodb:GetItem
  #       Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}"
  #   events:
  #     - http:
  #         method: get
  #         path: todos
  #         cors: true
  #         # authorizer: Auth

  ## Not intended for production use at this time.
  ## TODO: disable or fix
  GetAllTodos:
    handler: src/lambda/http/getAllTodos.handler
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Scan
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}"
    events:
      - http:
          method: get
          path: todos/all
          cors: true
          # authorizer: Auth

  # # TODO: Configure this function
  # # Provide property for setting up CORS, Authorizer, iamRoleStatements, and request schemas
  # UpdateTodo:
  #   handler: src/lambda/http/updateTodo.handler
  #   events:
  #     - http:
  #         method: patch
  #         path: todos/{todoId}

  # # TODO: Configure this function
  # # Provide property for setting up CORS, Authorizer, iamRoleStatements
  # DeleteTodo:
  #   handler: src/lambda/http/deleteTodo.handler
  #   events:
  #     - http:
  #         method: delete
  #         path: todos/{todoId}

  GetImages: # byGroupId
    handler: src/lambda/http/getImages.handler
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GROUPS_TABLE}"
      - Effect: "Allow"
        Action:
          - dynamodb:Query
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}"
    events:
      - http:
          method: get
          path: groups/{groupId}/images
          cors: true

  GetImage:
    handler: src/lambda/http/getImage.handler
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Query
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}/index/${self:provider.environment.IMAGE_ID_INDEX}"
    events:
      - http:
          method: get
          path: images/{imageId}
          cors: true

  CreateImage:
    handler: src/lambda/http/createImage.handler
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:GetItem
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.GROUPS_TABLE}"
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
        Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.IMAGES_TABLE}"
    events:
      - http:
          method: post
          path: groups/{groupId}/images
          cors: true

  # # TODO: Configure this function
  # # Provide property for setting up CORS, Authorizer, iamRoleStatements
  # GenerateUploadUrl:
  #   handler: src/lambda/http/generateUploadUrl.handler
  #   events:
  #     - http:
  #         method: post
  #         path: todos/{todoId}/attachment
